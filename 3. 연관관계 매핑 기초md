# 연관관계 매핑 기초



## 1. 연관관계

### 객체의 양방향 관계

- 객체의 양방향 관계는 사실 양방향 관계가 아니라 서로 다른 단방향 관계 2개다.
- 객체를 양방향으로 참조하려면 단방향 연관관계를 2개 만들어야 한다.

### 테이블의 양방향 연관관계

- 테이블은 **외래 키 하나**로 두 테이블의 연관관계를 관리할 수 있다.
- MEMBER.TEAM_ID 외래 키 하나로 양방향 연관관계를 가진다.
  - = 양쪽으로 조인할 수 있다.



## 2. 연관관계의 주인(Owner)

### 양방향 매핑 규칙

- 객체의 두 관계 중 하나만을 연관관계의 주인으로 지정해야 한다.

- **연관관계의 주인만이 외래 키를 관리(등록/수정)**할 수 있다.

- **주인이 아닌 쪽은 읽기만 가능**하다.

- 주인은 mappedBy 속성을 사용하지 않는다.

  - ~by 자체가 피동의 표현 (~에 의해)

- **주인이 아니면 mappedBy 속성**으로 주인을 지정할 수 있다.

- <u>**외래 키가 있는 곳을 주인**</u>으로 정해라. (1:N 관계에서 N이 주인)

  - 진짜 매핑 - 연관관계의 주인
  - 가짜 매핑 - 주인의 반대
  - 왜? 
    - 가짜 매핑에서 값을 바꾸면 **반대 테이블에 UPDATE쿼리가 나감**
    -  성능이슈가 있음

  

### 주의점

- **<u>양방향 매핑 시 항상 양쪽 모두에 값을 세팅</u>**해주는 게 맞다..!!

  - 순수 객체 상태를 고려해서

  - 순수한 자바 코드로 테스트 할 때

  - **연관관계 편의 메소드**를 생성하자!

    - ```java
      // 값을 세팅하는 메소드를 원자적으로 구성
      // Member(N)
      public void changeTeam(Team team) {
        this.team = team;
        team.getMembers().add(this);
      }
      ```

    - ```java
      // Team(1)
      public void addMember(Member member) {
        members.add(member);
        member.setTeam(this);
      }
      ```

    - 관계를 맺는 두 개의 Entity 중 하나에서만 작성한다 -> 상황에 따라 다름

- 양방향 매핑 시에 무한루프를 조심하자

  - toString(), lombok, JSON 생성 라이브러리(in Spring)
  - 롬복에서 toString()에서 만드는 거 사용X
  - 컨트롤러에서 절대 Entity를 반환 X -> DTO로 반환해서 전달
    - 무한루프 발생 가능성
    - 직접 참조로 인한 변경 가능성



### 양방향 매핑 정리

- **단방향 매핑으로도 이미 연관관계 매핑은 완료**된다.
  - 우선 단방향 매핑만 하고, 그후 필요에 따라 양방향 매핑을 추가해라
  - 양방향 매핑은 반대 방향으로 조회(객체 그래프 탐색)기능이 추가된 것 뿐임
- JPQL에서 역방향으로 탐색할 일이 많음
- 단방향 매핑을 잘 하고 양방향은 필요할 때 추가해도 됨 -> 테이블에 영향을 주지 않음

